{
  "info": {
    "_postman_id": "b18bb628-5a06-451c-b56f-2093ec47d536",
    "name": "Intermediaries QuotationFlow(AS-IS)",
    "description": "Postman collection dedicated to the Intermediaries QuotationFlow.\n\nAPI exposed in `edge/intermediaries/quotationflow`",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "16158279",
    "_collection_link": "https://www.postman.com/contespecial/workspace/testautomationapi/collection/16158279-b18bb628-5a06-451c-b56f-2093ec47d536?action=share&creator=16158279&source=collection_link"
  },
  "item": [
    {
      "name": "FastQuote",
      "item": [
        {
          "name": "Annual",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", body.sessionUUID);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "saveAndQuote",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndQuote\",\r\n    \"params\": [\r\n        \"{{quoteID}}\",\r\n        \"{{sessionUUID}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Biannual",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is biannual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"biannual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Installment is present\", function () {\r",
                      "    pm.expect(offeredQuote.premium.firstInstallment_AIT).to.have.property(\"amount\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'biannual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Annual Bank",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "updateListCoveragesAndSave",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "\r",
                      "const baseData = body.baseData;\r",
                      "pm.test(\"Status is Quoted\", () => {\r",
                      "    pm.expect(baseData.periodStatus).to.equal(\"Quoted\")\r",
                      "})\r",
                      "\r",
                      "\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages correctly selected\", () => {\r",
                      "    const selectedCovs = JSON.parse(pm.collectionVariables.get(\"selectableCoverages\"));\r",
                      "\r",
                      "    const selectedCodes = selectedCovs.map(cov => cov.code);\r",
                      "    offeringsList\r",
                      "        .filter((cov) => selectedCodes.includes(cov.code))\r",
                      "        .every(cov => cov.status === \"selected\")\r",
                      "})\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const selectableCoverages = [\r",
                      "  {\r",
                      "    code: \"A004\",\r",
                      "    terms: [\r",
                      "      {\r",
                      "        code: \"A004Lim1\",\r",
                      "        value: \"limit5000\",\r",
                      "      },\r",
                      "    ],\r",
                      "  },\r",
                      "  {\r",
                      "    code: \"AC002\",\r",
                      "    terms: [\r",
                      "      {\r",
                      "        code: \"AC002Typ1\",\r",
                      "        value: \"plus\",\r",
                      "      },\r",
                      "    ],\r",
                      "  },\r",
                      "];\r",
                      "\r",
                      "pm.collectionVariables.set(\"selectableCoverages\",JSON.stringify(selectableCoverages))"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"updateListCoveragesAndSave\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"selectableCoverages\": {{selectableCoverages}},\r\n            \"isSaveRequired\": true\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set Bank transfer User",
                  "const username = \"Master.Assi\";",
                  "const password = \"Master.Assi@1\";",
                  "",
                  "const producerCode = {",
                  "  code: \"50094800001\",",
                  "  default: true,",
                  "  publicID: \"pc:4676\",",
                  "  displayValue: \"Assiteca Master (50094800001)\",",
                  "};",
                  "",
                  "pm.collectionVariables.set(\"username\", username);",
                  "pm.collectionVariables.set(\"password\", password);",
                  "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Reset normal credit card User",
                  "const username = \"ProdTest1\";",
                  "const password = \"ProdTest1@\";",
                  "",
                  "const producerCode = {",
                  "  code: \"BrokersPlan001\",",
                  "  default: true,",
                  "  publicID: \"pc:601\",",
                  "  displayValue: \"ProdTest1 ProdTest1 (BrokersPlan001)\",",
                  "};",
                  "",
                  "pm.collectionVariables.set(\"username\", username);",
                  "pm.collectionVariables.set(\"password\", password);",
                  "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));"
                ]
              }
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const plateNumber = \"ET605BN\";",
              "const dateOfBirth = {",
              "    day: 15,",
              "    month: 3,",
              "    year: 1987,",
              "};",
              "const vehicleType_AIT = \"car\";",
              "",
              "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
              "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
              "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "UWIssues",
      "item": [
        {
          "name": "NP001",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "// NP001 triggered \r",
                      "pm.test(\"Check NP001 is present\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP001\");  \r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "    year: 2021\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP001UW\";",
                  "const dateOfBirth = {",
                  "    day: 21,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP001 Moto",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"A003 and A004 are not present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsNotPresent = (code) => {\r",
                      "        const isPresent = offeringsList.some(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(isPresent).to.be.false;\r",
                      "    };\r",
                      "    assertCoverageIsNotPresent(\"A003\"); //A003 is not saleable in case of motorcycle \r",
                      "    assertCoverageIsNotPresent(\"A004\"); //A004 is not saleable in case of motorcycle \r",
                      "\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "// NP001 triggered \r",
                      "pm.test(\"Check NP001 is present\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP001\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "    year: 2021\r",
                      "}\r",
                      "\r",
                      "const vehUserData = {\r",
                      "    fuelType_AIT: \"D\",\r",
                      "    make: \"000016\",\r",
                      "    makeDescription_AIT: \"Aprilia\",\r",
                      "    model: \"000329\",\r",
                      "    modelDescription_AIT: \"Caponord 1000\",\r",
                      "    version: 'pc:7662',\r",
                      "    registrationDate_AIT:\r",
                      "        { day: 26, month: 8, year: 2014 },\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues, ...vehUserData };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const person = {\r",
                      "  cityOfBirth_AIT: \"20500\",\r",
                      "  countryOfBirth_AIT: \"ITAL\",\r",
                      "  dateOfBirth: {\r",
                      "    day: 20,\r",
                      "    month: 4,\r",
                      "    year: 1963,\r",
                      "  },\r",
                      "  displayName: \"MUSSIME PIMPA\",\r",
                      "  emailAddress1_AIT: \"a@a.com\",\r",
                      "  firstName: \"MUSSIME\",\r",
                      "  foreignB: false,\r",
                      "  lastName: \"PIMPA\",\r",
                      "  mainCellPhone_AIT: \"66658665854\",\r",
                      "  nameCityOfBirth_AIT: \"RHO\",\r",
                      "  nameProvinceOfBirth_AIT: \"MILANO\",\r",
                      "  primaryAddress_AIT: {\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    city: \"10000\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    nameCity_AIT: \"VERCELLI\",\r",
                      "    nameProvinceOfResidence_AIT: \"VERCELLI\",\r",
                      "    postalCode: \"13100\",\r",
                      "    provinceOfResidence_AIT: \"VC\",\r",
                      "    publicID: \"pc:166701\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "  },\r",
                      "  provinceOfBirth_AIT: \"MI\",\r",
                      "  publicID: \"pc:301171\",\r",
                      "  taxId_AIT: \"PMPMSM63E20H264H\",\r",
                      "  yearOfArrival_AIT: \"0\",\r",
                      "};\r",
                      "\r",
                      " \r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\",\r",
                      "    motorcycleDetail: 125,\r",
                      "    motorcycleExperienceMonths_AIT: \"1\",\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"MO00123\";",
                  "const dateOfBirth = {",
                  "    day: 21,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"motorcycle\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP002",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"FootprintKiteKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "const getClaims = function () {\r",
                      "    const lastYear = todayYear - 1;\r",
                      "    const lastYearBefore = todayYear - 2;\r",
                      "    const month = 1;\r",
                      "    const day = 1;\r",
                      "    const getFullDate = ({ year, month, day }) => moment({ year, month, day }).utc().format();\r",
                      "\r",
                      "    const generateClaim = (year) => ({\r",
                      "        date: {\r",
                      "            year,\r",
                      "            month,\r",
                      "            day,\r",
                      "            fulldate: getFullDate({ year, month, day }),\r",
                      "        },\r",
                      "        responsability: \"1\"\r",
                      "    });\r",
                      "    return [\r",
                      "        generateClaim(lastYear),\r",
                      "        generateClaim(lastYearBefore)\r",
                      "    ]\r",
                      "};\r",
                      "\r",
                      "\r",
                      "vehicle.claims_AIT = getClaims();\r",
                      "\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP001FQ\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP003",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"FootprintKiteKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP003UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP007",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "// NP007 triggered \r",
                      "pm.test(\"Check NP007 is present\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP007\"); \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = JSON.parse(pm.collectionVariables.get(\"person\"));\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP007UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP008",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 500\", function () {\r",
                      "    pm.response.to.have.status(500);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.message).to.include(\"NP008\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP008UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP013",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"TechnicalKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "const sicilyAddress = {\r",
                      "    city: \"16600\",\r",
                      "    nameCity_AIT: \"AGRIGENTO\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    postalCode: \"92100\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    nameProvinceOfResidence_AIT: \"AGRIGENTO\",\r",
                      "    publicID: \"pc:15752\",\r",
                      "    provinceOfResidence_AIT: \"AG\",\r",
                      "};\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = { ... JSON.parse(pm.collectionVariables.get(\"person\")), primaryAddress_AIT: sicilyAddress };\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"ET605BN\";",
                  "const dateOfBirth = {",
                  "    day: 15,",
                  "    month: 3,",
                  "    year: 1987,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP014",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"TechnicalKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "const sicilyAddress = {\r",
                      "    city: \"16600\",\r",
                      "    nameCity_AIT: \"AGRIGENTO\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    postalCode: \"92100\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    nameProvinceOfResidence_AIT: \"AGRIGENTO\",\r",
                      "    publicID: \"pc:15752\",\r",
                      "    provinceOfResidence_AIT: \"AG\",\r",
                      "};\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const forbiddenAddress = {\r",
                      "    city: \"03400\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "    postalCode: \"80016\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    provinceOfResidence_AIT: \"NA\",\r",
                      "};\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "const person = { ... JSON.parse(pm.collectionVariables.get(\"person\")), primaryAddress_AIT: forbiddenAddress };\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '5',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"ET605BN\";",
                  "const dateOfBirth = {",
                  "    day: 15,",
                  "    month: 3,",
                  "    year: 1987,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DirectPurchase",
      "item": [
        {
          "name": "Bersani",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", body.sessionUUID);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "    licensePlateOrigin_AIT: \"RF665VV\",\r",
                      "    currentInsuranceSituation_AIT: \"originCompany\",\r",
                      "    insuredYears_AIT: \"one\",\r",
                      "\r",
                      "\r",
                      "}\r",
                      "\r",
                      "const missingAniaData = {\r",
                      "    claimsNumberAniaRegNumb: \"0\",\r",
                      "    claimsWithFaultLast5Y: 0,\r",
                      "    claimsWithoutFaultLast5Y: 0,\r",
                      "    lastNameATR: \"PIMPA\",\r",
                      "    nameATR: \"MUSSIME\",\r",
                      "}\r",
                      "\r",
                      "const aniaData_AIT = { ...quoteData.lobData.mtmotor.coverables.vehicles[0].aniaData_AIT, ...missingAniaData}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues, aniaData_AIT };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '3',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\",\r",
                      "    monthLicensed: \"12\",\r",
                      "    yearLicensed: 2000,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "\r",
                      "}\r",
                      "\r",
                      "const person = {\r",
                      "  cityOfBirth_AIT: \"20500\",\r",
                      "  countryOfBirth_AIT: \"ITAL\",\r",
                      "  dateOfBirth: {\r",
                      "    day: 20,\r",
                      "    month: 4,\r",
                      "    year: 1963,\r",
                      "  },\r",
                      "  displayName: \"MUSSIME PIMPA\",\r",
                      "  emailAddress1_AIT: \"a@a.com\",\r",
                      "  firstName: \"MUSSIME\",\r",
                      "  foreignB: false,\r",
                      "  lastName: \"PIMPA\",\r",
                      "  mainCellPhone_AIT: \"66658665854\",\r",
                      "  nameCityOfBirth_AIT: \"RHO\",\r",
                      "  nameProvinceOfBirth_AIT: \"MILANO\",\r",
                      "  primaryAddress_AIT: {\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    city: \"10000\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    nameCity_AIT: \"VERCELLI\",\r",
                      "    nameProvinceOfResidence_AIT: \"VERCELLI\",\r",
                      "    postalCode: \"13100\",\r",
                      "    provinceOfResidence_AIT: \"VC\",\r",
                      "    publicID: \"pc:15752\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "  },\r",
                      "  provinceOfBirth_AIT: \"MI\",\r",
                      "  taxId_AIT: \"PMPMSM63E20H264H\",\r",
                      "  yearOfArrival_AIT: \"0\",\r",
                      "};\r",
                      "\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"GB767TS\";",
                  "const dateOfBirth = {",
                  "    day: 22,",
                  "    month: 5,",
                  "    year: 1982,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "No Chassis",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", body.sessionUUID);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "\r",
                      "const vehUserData = {\r",
                      "    model: '003956',\r",
                      "    version: 'pc:138882',\r",
                      "    registrationDate_AIT:\r",
                      "        { day: 26, month: 8, year: 2014 },\r",
                      "    make: '000083'\r",
                      "}\r",
                      "\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "}\r",
                      "\r",
                      "const missingAniaData = {\r",
                      "    claimsNumberAniaRegNumb: \"0\",\r",
                      "    claimsWithFaultLast5Y: 0,\r",
                      "    claimsWithoutFaultLast5Y: 0,\r",
                      "    lastNameATR: \"PIMPA\",\r",
                      "    nameATR: \"MUSSIME\",\r",
                      "}\r",
                      "\r",
                      "const aniaData_AIT = { ...quoteData.lobData.mtmotor.coverables.vehicles[0].aniaData_AIT, ...missingAniaData}\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehUserData, ...vehDeafultValues, aniaData_AIT };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '3',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\",\r",
                      "    monthLicensed: \"12\",\r",
                      "    yearLicensed: 2000,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "\r",
                      "}\r",
                      "\r",
                      "const person = {\r",
                      "  cityOfBirth_AIT: \"20500\",\r",
                      "  countryOfBirth_AIT: \"ITAL\",\r",
                      "  dateOfBirth: {\r",
                      "    day: 20,\r",
                      "    month: 4,\r",
                      "    year: 1963,\r",
                      "  },\r",
                      "  displayName: \"MUSSIME PIMPA\",\r",
                      "  emailAddress1_AIT: \"a@a.com\",\r",
                      "  firstName: \"MUSSIME\",\r",
                      "  foreignB: false,\r",
                      "  lastName: \"PIMPA\",\r",
                      "  mainCellPhone_AIT: \"66658665854\",\r",
                      "  nameCityOfBirth_AIT: \"RHO\",\r",
                      "  nameProvinceOfBirth_AIT: \"MILANO\",\r",
                      "  primaryAddress_AIT: {\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    city: \"10000\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    nameCity_AIT: \"VERCELLI\",\r",
                      "    nameProvinceOfResidence_AIT: \"VERCELLI\",\r",
                      "    postalCode: \"13100\",\r",
                      "    provinceOfResidence_AIT: \"VC\",\r",
                      "    publicID: \"pc:15752\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "  },\r",
                      "  provinceOfBirth_AIT: \"MI\",\r",
                      "  taxId_AIT: \"PMPMSM63E20H264H\",\r",
                      "  yearOfArrival_AIT: \"0\",\r",
                      "};\r",
                      "\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP479OM\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "First Policy",
          "item": [
            {
              "name": "getOrCreateAccountAndSubmission_AIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.jobNumber;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID is present\", function () {\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getOrCreateAccountAndSubmission_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gateway/submission",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gateway",
                    "submission"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Take the whole response\r",
                      " */\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(result));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * QuoteId & SessionUUID\r",
                      " */\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * BaseData\r",
                      " */\r",
                      "const baseData = result.baseData;\r",
                      "const longQuote_AIT = baseData.longQuote_AIT;\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "    pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "const status = baseData.periodStatus;\r",
                      "pm.test(\"PeriodStatus is Draft\", () => {\r",
                      "    pm.expect(status).to.be.a('string').and.to.equal(\"Draft\")\r",
                      "})\r",
                      "pm.collectionVariables.set(\"baseData\", JSON.stringify(baseData));\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Vehicle\r",
                      " */\r",
                      "const vehicle = result.lobData.mtmotor.coverables.vehicles[0];\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "    pm.expect(vehicle).to.be.an('object');\r",
                      "    pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Subject\r",
                      " */\r",
                      "const subjects = result.lobData.mtmotor.coverables.subjects_AIT;\r",
                      "pm.collectionVariables.set(\"subjects\", JSON.stringify(subjects));\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getQuoteBasedOnVehicleSearch_AIT\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result;\r",
                      "const offeredQuote = body.quoteData.offeredQuotes[0];\r",
                      "const offeringsList = body.lobData.mtmotor.offeringsList;\r",
                      "\r",
                      "pm.test(\"Response is correctly filled\", function () {\r",
                      "    pm.expect(offeringsList).to.be.an(\"array\");\r",
                      "    pm.expect(offeredQuote).to.be.an(\"object\");\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Coverages are present\", function () {\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = offeringsList.find(cov => cov.code === code);\r",
                      "\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Offering is populated\", function () {\r",
                      "    pm.expect(offeredQuote).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Premium is annual\", function () {\r",
                      "    pm.expect(offeredQuote.premium.paymentPeriod_AIT).to.equal(\"annual\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status is PreQuoted\", function () {\r",
                      "    pm.expect(offeredQuote.status).to.equal(\"PreQuoted\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"No UwIssues\", function () {\r",
                      "    pm.expect(offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(offeredQuote.activeUWIssues).to.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", body.sessionUUID);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "const today = moment().date(); //day of month\r",
                      "const todayMonth = moment().month(); //month (0 to 11) \r",
                      "const todayYear = moment().year(); //year (aaaa)\r",
                      "const nextYear = todayYear + 1;\r",
                      "\r",
                      "\r",
                      "const quoteData = JSON.parse(pm.collectionVariables.get(\"quoteData\"));\r",
                      "\r",
                      "/**\r",
                      " * Update BaseData\r",
                      " */\r",
                      "\r",
                      "const periodStartDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": todayYear\r",
                      "}\r",
                      "\r",
                      "const periodEndDate = {\r",
                      "    \"day\": today,\r",
                      "    \"month\": todayMonth,\r",
                      "    \"year\": nextYear\r",
                      "}\r",
                      "const paymentPeriod_AIT = 'annual';\r",
                      "\r",
                      "const baseData = JSON.parse(pm.collectionVariables.get(\"baseData\"));\r",
                      "quoteData.baseData = { ...baseData, paymentPeriod_AIT, periodStartDate, periodEndDate };\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"periodStartDate\", JSON.stringify(periodStartDate));\r",
                      "pm.collectionVariables.set(\"periodEndDate\", periodEndDate);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod_AIT);\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Vehicle with missing fields\r",
                      " */\r",
                      "\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "\r",
                      "\r",
                      "\r",
                      "const vehDeafultValues = {\r",
                      "    averageKmOneYear: 15000,\r",
                      "    coverageType_AIT: \"allDrivers\",\r",
                      "    overnightParking_AIT: \"box\",\r",
                      "    primaryUse: \"leisureOnly\",\r",
                      "    cuClass_AIT: \"14\",\r",
                      "    currentInsuranceSituation_AIT: \"newVehicle\",\r",
                      "}\r",
                      "\r",
                      "const missingAniaData = {\r",
                      "    claimsNumberAniaRegNumb: \"0\",\r",
                      "    claimsWithFaultLast5Y: 0,\r",
                      "    claimsWithoutFaultLast5Y: 0,\r",
                      "    lastNameATR: \"PIMPA\",\r",
                      "    nameATR: \"MUSSIME\",\r",
                      "}\r",
                      "\r",
                      "const aniaData_AIT = { ...quoteData.lobData.mtmotor.coverables.vehicles[0].aniaData_AIT, ...missingAniaData }\r",
                      "\r",
                      "quoteData.lobData.mtmotor.coverables.vehicles[0] = { ...vehicle, ...vehDeafultValues, aniaData_AIT };\r",
                      "\r",
                      "/**\r",
                      " * UPDATE Subject with missing fields\r",
                      " */\r",
                      "\r",
                      "const mainOwner = JSON.parse(pm.collectionVariables.get(\"mainOwner\"));\r",
                      "const mainDriver = JSON.parse(pm.collectionVariables.get(\"mainDriver\"));\r",
                      "\r",
                      "const subjectRoles = [{\r",
                      "    \"ownerLeasing_AIT\": false,\r",
                      "    \"roles_AIT\": [mainOwner, mainDriver],\r",
                      "    \"vehicleID_AIT\": vehicle.publicID\r",
                      "}]\r",
                      "\r",
                      "const subjects = JSON.parse(pm.collectionVariables.get(\"subjects\"));\r",
                      "const policyholder = subjects.find((s) => s.isPolicyHolder);\r",
                      "pm.test(\"PolicyHolder is a person\", () => {\r",
                      "    pm.expect(policyholder.isPerson_AIT).to.be.true\r",
                      "})\r",
                      "\r",
                      "const subjDefaultValues = {\r",
                      "    ageLicensed_AIT: 18,\r",
                      "    everFined_AIT: false,\r",
                      "    everSuspended_AIT: false,\r",
                      "    remainingPoints_AIT: '3',\r",
                      "    useOtherVehicle_AIT: false,\r",
                      "    isDriver_AIT: true,\r",
                      "    occupation_AIT: \"Accompagnatore\",\r",
                      "    qualification_AIT: \"6\",\r",
                      "    maritalStatus_AIT: \"S\",\r",
                      "    licenseType_AIT: \"2\",\r",
                      "    gotSons_AIT: false,\r",
                      "    youngestLicense_AIT: \"2\",\r",
                      "    monthLicensed: \"12\",\r",
                      "    yearLicensed: 2000,\r",
                      "    youngestLicense_AIT: \"2\"\r",
                      "\r",
                      "}\r",
                      "\r",
                      "const person = {\r",
                      "    cityOfBirth_AIT: \"20500\",\r",
                      "    countryOfBirth_AIT: \"ITAL\",\r",
                      "    dateOfBirth: {\r",
                      "        day: 20,\r",
                      "        month: 4,\r",
                      "        year: 1963,\r",
                      "    },\r",
                      "    displayName: \"MUSSIME PIMPA\",\r",
                      "    emailAddress1_AIT: \"a@a.com\",\r",
                      "    firstName: \"MUSSIME\",\r",
                      "    foreignB: false,\r",
                      "    lastName: \"PIMPA\",\r",
                      "    mainCellPhone_AIT: \"66658665854\",\r",
                      "    nameCityOfBirth_AIT: \"RHO\",\r",
                      "    nameProvinceOfBirth_AIT: \"MILANO\",\r",
                      "    primaryAddress_AIT: {\r",
                      "        addressLine1: \"aaaa\",\r",
                      "        addressNumber_AIT: \"12\",\r",
                      "        city: \"10000\",\r",
                      "        displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "        nameCity_AIT: \"VERCELLI\",\r",
                      "        nameProvinceOfResidence_AIT: \"VERCELLI\",\r",
                      "        postalCode: \"13100\",\r",
                      "        provinceOfResidence_AIT: \"VC\",\r",
                      "        publicID: \"pc:15752\",\r",
                      "        toponym_AIT: \"VIALE\",\r",
                      "    },\r",
                      "    provinceOfBirth_AIT: \"MI\",\r",
                      "    taxId_AIT: \"PMPMSM63E20H264H\",\r",
                      "    yearOfArrival_AIT: \"0\",\r",
                      "};\r",
                      "\r",
                      "\r",
                      "const subject = { ...policyholder, ...subjDefaultValues, vehicleSubjectRoles_AIT: subjectRoles, person }\r",
                      "quoteData.lobData.mtmotor.coverables.subjects_AIT[0] = subject;\r",
                      "\r",
                      "\r",
                      "/**\r",
                      " * Save request body\r",
                      " */\r",
                      "pm.collectionVariables.set(\"quoteData\", JSON.stringify(quoteData));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"saveAndPreQuote_AIT\",\r\n    \"params\": [\r\n        {{quoteData}}\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/gatewayquote/quote",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "gatewayquote",
                    "quote"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP003FQ\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "password",
        "value": "{{password}}",
        "type": "string"
      },
      {
        "key": "username",
        "value": "{{username}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const username = \"su\";",
          "const password = \"gw\";",
          "const dummyAccount = {",
          "    contactName: \"0dummyname0\",",
          "    primaryAddress: {",
          "        city: \"0dummycity0\",",
          "        state: \"VAO_EXT\",",
          "        postalCode: \"00000\",",
          "        country: \"IT\",",
          "        addressLine1: \"0dummyaddressline0\",",
          "        addressType: \"home\",",
          "        provinceOfResidence_AIT: \"TO\",",
          "        addressNumber_AIT: \"1\",",
          "        toponym_AIT: \"VIA\",",
          "    },",
          "    firstName: \"0dummyname0\",",
          "    lastName: \"0dummyname0\",",
          "    subtype: \"Person\",",
          "    producerCode: \"111\",",
          "    emailAddress1: \"dummy@email.dummy\",",
          "    mainCellPhone_AIT: \"123456789\",",
          "    countryOfBirth_AIT: \"ITAL\",",
          "    yearOfArrival_AIT: \"\",",
          "    provinceOfBirth_AIT: \"TO\",",
          "    cityOfBirth_AIT: \"31240\",",
          "    dateOfBirth: {",
          "        year: 1980,",
          "        month: 1,",
          "        day: 1,",
          "    },",
          "    gender: \"M\",",
          "    taxId_AIT: \"0000000000000000\",",
          "};",
          "",
          "/*",
          "const producerCode = {",
          "    code: \"Admiral Services Direct\",",
          "    default: true,",
          "    publicID: \"it:1\",",
          "    displayValue: \"core user\"",
          "};",
          "*/",
          "// broker",
          "const producerCode = {",
          "    code: \"BrokersPlan001\",",
          "    default: true,",
          "    publicID: \"pc:601\",",
          "    displayValue: \"ProdTest1 ProdTest1 (BrokersPlan001)\",",
          "};",
          "",
          "const mainOwner = {",
          "    \"subjectRol_AIT\": {",
          "        \"rol_AIT\": \"MAIN_OWNER\",",
          "        \"publicID\": \"zqmga70ocvudr3o173nekbcernb\"",
          "    }",
          "};",
          "",
          "const mainDriver = {",
          "    \"subjectRol_AIT\": {",
          "        \"rol_AIT\": \"MAIN_DRIVER\",",
          "        \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\"",
          "    }",
          "};",
          "",
          "const person = {",
          "  publicID: \"pc:302400\",",
          "  firstName: \"JACOPO\",",
          "  lastName: \"FABRIZI\",",
          "  dateOfBirth: {",
          "    day: 15,",
          "    month: 3,",
          "    year: 1987,",
          "  },",
          "  emailAddress1_AIT: \"a@a.it\",",
          "  mainCellPhone_AIT: \"3391418005\",",
          "  countryOfBirth_AIT: \"ITAL\",",
          "  provinceOfBirth_AIT: \"RM\",",
          "  cityOfBirth_AIT: \"39060\",",
          "  foreignB: false,",
          "  primaryAddress_AIT: {",
          "    nameProvinceOfResidence_AIT: \"ROMA\",",
          "    city: \"39210\",",
          "    publicID: \"pc:168865\",",
          "    postalCode: \"00030\",",
          "    addressLine1: \"djkjhjkh\",",
          "    nameCity_AIT: \"MONTELANICO\",",
          "    provinceOfResidence_AIT: \"RM\",",
          "    toponym_AIT: \"ASCENSORE\",",
          "    addressNumber_AIT: \"12\",",
          "    displayName: \"ASCENSORE djkjhjkh 12, 00030 MONTELANICO (RM)\",",
          "  },",
          "  yearOfArrival_AIT: \"0\",",
          "  taxId_AIT: \"FBRJCP87D15C858N\",",
          "  nameProvinceOfBirth_AIT: \"ROMA\",",
          "  nameCityOfBirth_AIT: \"COLLEFERRO\",",
          "  displayName: \"JACOPO FABRIZI\",",
          "};",
          "",
          "pm.collectionVariables.set(\"username\", username);",
          "pm.collectionVariables.set(\"password\", password);",
          "pm.collectionVariables.set(\"dummyAccount\", JSON.stringify(dummyAccount));",
          "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));",
          "pm.collectionVariables.set(\"mainOwner\", JSON.stringify(mainOwner));",
          "pm.collectionVariables.set(\"mainDriver\", JSON.stringify(mainDriver));",
          "pm.collectionVariables.set(\"person\", JSON.stringify(person));",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "username",
      "value": ""
    },
    {
      "key": "password",
      "value": ""
    },
    {
      "key": "dummyAccount",
      "value": ""
    },
    {
      "key": "producerCode",
      "value": ""
    },
    {
      "key": "plateNumber",
      "value": ""
    },
    {
      "key": "dateOfBirth",
      "value": ""
    },
    {
      "key": "vehicleType_AIT",
      "value": ""
    },
    {
      "key": "mainOwner",
      "value": ""
    },
    {
      "key": "mainDriver",
      "value": ""
    },
    {
      "key": "person",
      "value": ""
    },
    {
      "key": "quoteID",
      "value": ""
    },
    {
      "key": "sessionUUID",
      "value": ""
    },
    {
      "key": "vehicle",
      "value": ""
    },
    {
      "key": "quoteData",
      "value": ""
    },
    {
      "key": "today",
      "value": ""
    },
    {
      "key": "todayMonth",
      "value": ""
    },
    {
      "key": "todayYear",
      "value": ""
    },
    {
      "key": "nextYear",
      "value": ""
    },
    {
      "key": "paymentPeriod",
      "value": ""
    },
    {
      "key": "subjects",
      "value": ""
    },
    {
      "key": "baseData",
      "value": ""
    },
    {
      "key": "periodStartDate",
      "value": ""
    },
    {
      "key": "periodEndDate",
      "value": ""
    },
    {
      "key": "selectableCoverages",
      "value": ""
    },
    {
      "key": "primaryAddress",
      "value": ""
    }
  ]
}
