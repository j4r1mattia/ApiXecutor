{
  "info": {
    "_postman_id": "73fee3f7-60da-474f-aad6-a1a90bf164f3",
    "name": "Intermediaries QuotationFlow",
    "description": "Postman collection dedicated to the Intermediaries QuotationFlow.\n\nAPI exposed in `edge/intermediaries/quotationflow`",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "16158279",
    "_collection_link": "https://www.postman.com/contespecial/workspace/testautomationapi/collection/16158279-73fee3f7-60da-474f-aad6-a1a90bf164f3?action=share&creator=16158279&source=collection_link"
  },
  "item": [
    {
      "name": "FastQuote",
      "item": [
        {
          "name": "Annual",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Biannual",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'biannual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Annual Bank",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Set Bank transfer User",
                  "const username = \"Master.Assi\";",
                  "const password = \"Master.Assi@1\";",
                  "",
                  "const producerCode = {",
                  "  code: \"50094800001\",",
                  "  default: true,",
                  "  publicID: \"pc:4676\",",
                  "  displayValue: \"Assiteca Master (50094800001)\",",
                  "};",
                  "",
                  "pm.collectionVariables.set(\"username\", username);",
                  "pm.collectionVariables.set(\"password\", password);",
                  "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Reset normal credit card User",
                  "const username = \"ProdTest1\";",
                  "const password = \"ProdTest1@\";",
                  "",
                  "const producerCode = {",
                  "  code: \"BrokersPlan001\",",
                  "  default: true,",
                  "  publicID: \"pc:601\",",
                  "  displayValue: \"ProdTest1 ProdTest1 (BrokersPlan001)\",",
                  "};",
                  "",
                  "pm.collectionVariables.set(\"username\", username);",
                  "pm.collectionVariables.set(\"password\", password);",
                  "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));"
                ]
              }
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const plateNumber = \"SP001FQ\";",
              "const dateOfBirth = {",
              "    day: 20,",
              "    month: 4,",
              "    year: 1963,",
              "};",
              "const vehicleType_AIT = \"car\";",
              "",
              "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
              "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
              "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "UWIssues",
      "item": [
        {
          "name": "NP001",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is true\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "ProdTest1@",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "ProdTest1",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "// NP001 triggered \r",
                      "pm.test(\"Check NP001 is present\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP001\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "gw",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "su",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP001UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP001 Moto",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "// NP001 triggered \r",
                      "pm.test(\"Check NP001 is present\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP001\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"MO00123\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"motorcycle\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP002",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"FootprintKiteKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1;\r",
                      "const paymentPeriod = 'annual';\r",
                      "// add Claims to vehicle\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "\r",
                      "const getClaims = function () {\r",
                      "    const lastYear = todayYear - 1;\r",
                      "    const lastYearBefore = todayYear - 2;\r",
                      "    const month = 1;\r",
                      "    const day = 1;\r",
                      "    const getFullDate = ({ year, month, day }) => moment({ year, month, day }).utc().format();\r",
                      "\r",
                      "    const generateClaim = (year) => ({\r",
                      "        date: {\r",
                      "            year,\r",
                      "            month,\r",
                      "            day,\r",
                      "            fulldate: getFullDate({ year, month, day }),\r",
                      "        },\r",
                      "        responsability: \"1\"\r",
                      "    });\r",
                      "    return [\r",
                      "        generateClaim(lastYear),\r",
                      "        generateClaim(lastYearBefore)\r",
                      "    ]\r",
                      "};\r",
                      "\r",
                      "\r",
                      "vehicle.claims_AIT = getClaims();\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP001FQ\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP003",
          "item": [
            {
              "name": "createNewSubmission Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"FootprintKiteKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1;\r",
                      "const paymentPeriod = 'annual';\r",
                      "// add Claims to vehicle\r",
                      "const vehicle = JSON.parse(pm.collectionVariables.get(\"vehicle\"));\r",
                      "\r",
                      "const getClaims = function () {\r",
                      "    const lastYear = todayYear - 1;\r",
                      "    const lastYearBefore = todayYear - 2;\r",
                      "    const month = 1;\r",
                      "    const day = 1;\r",
                      "    const getFullDate = ({ year, month, day }) => moment({ year, month, day }).utc().format();\r",
                      "\r",
                      "    const generateClaim = (year) => ({\r",
                      "        date: {\r",
                      "            year,\r",
                      "            month,\r",
                      "            day,\r",
                      "            fulldate: getFullDate({ year, month, day }),\r",
                      "        },\r",
                      "        responsability: \"1\"\r",
                      "    });\r",
                      "    return [\r",
                      "        generateClaim(lastYear),\r",
                      "        generateClaim(lastYearBefore)\r",
                      "    ]\r",
                      "};\r",
                      "\r",
                      "\r",
                      "vehicle.claims_AIT = getClaims();\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP003UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP007",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "// NP007 triggered \r",
                      "pm.test(\"Check NP007 is present\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.true;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues[0].shortDescription).to.include(\"NP007\"); \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP007UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP008",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].message).to.include(\"NP008\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"NP008UW\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP013",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "ProdTest1@",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "ProdTest1",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"TechnicalKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "const sicilyAddress = {\r",
                      "    city: \"16600\",\r",
                      "    nameCity_AIT: \"AGRIGENTO\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "    displayName: \"VIALE aaaa 12, 13100 VERCELLI (VC)\",\r",
                      "    postalCode: \"92100\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    nameProvinceOfResidence_AIT: \"AGRIGENTO\",\r",
                      "    publicID: \"pc:15752\",\r",
                      "    provinceOfResidence_AIT: \"AG\",\r",
                      "};\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);\r",
                      "pm.collectionVariables.set(\"primaryAddress\", JSON.stringify(sicilyAddress));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "gw",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "su",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {{ primaryAddress }},\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP001FQ\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "NP014",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "    const result = jsonData.result;\r",
                      "    const quoteID = result.quoteID;\r",
                      "    const sessionUUID = result.sessionUUID;\r",
                      "    \r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "    \r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "ProdTest1@",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "ProdTest1",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const error = jsonData.error;\r",
                      "\r",
                      "pm.test(\"Check error FootprintKO\", function () {\r",
                      "    pm.expect(error.errorList_AIT[0].code).to.include(\"TechnicalKO\");  \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "const forbiddenAddress = {\r",
                      "    city: \"03400\",\r",
                      "    toponym_AIT: \"VIALE\",\r",
                      "    postalCode: \"80016\",\r",
                      "    addressNumber_AIT: \"12\",\r",
                      "    addressLine1: \"aaaa\",\r",
                      "    provinceOfResidence_AIT: \"NA\",\r",
                      "};\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);\r",
                      "pm.collectionVariables.set(\"primaryAddress\", JSON.stringify(forbiddenAddress));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "gw",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "su",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {{ primaryAddress }},\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP001FQ\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DirectPurchase",
      "item": [
        {
          "name": "Bersani",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"GB767TS\";",
                  "const dateOfBirth = {",
                  "    day: 22,",
                  "    month: 5,",
                  "    year: 1982,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "No Chassis",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP479OM\";",
                  "const dateOfBirth = {",
                  "    day: 20,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "First Policy",
          "item": [
            {
              "name": "createNewSubmission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"quoteID\", quoteID);\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "authority",
                    "value": "special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "accept-language",
                    "value": "IT"
                  },
                  {
                    "key": "cache-control",
                    "value": "no-cache"
                  },
                  {
                    "key": "content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "cookie",
                    "value": "JSESSIONID=4E66EFDD50471F22F8776F665BB3BD53; _hjSessionUser_1974272=eyJpZCI6Ijk0ZWMxYTNmLTk3NTktNWUyMy05NGZiLWU0OGVjNzEwMGI0OSIsImNyZWF0ZWQiOjE2ODMwMTMxODkwNTYsImV4aXN0aW5nIjpmYWxzZX0=; OptanonAlertBoxClosed=2023-05-02T08:14:30.007Z; OptanonConsent=isGpcEnabled=0&datestamp=Tue+May+02+2023+10%3A14%3A30+GMT%2B0200+(Ora+legale+dell%E2%80%99Europa+centrale)&version=6.31.0&isIABGlobal=false&hosts=&consentId=4d04b4ff-90db-43c7-ba6d-9b42dc7fe132&interactionCount=1&landingPath=NotLandingPage&groups=1%3A1%2C2%3A1%2C4%3A1%2C3%3A1; _ga=GA1.2.2104803961.1683016108; _gid=GA1.2.2111860906.1683016108; _hjAbsoluteSessionInProgress=0; Current-User=%7B%22userId%22%3A%2291f29d07-be89-4c7e-90ab-c1a8d9cb288b%22%7D; UAA_JSESSIONID=BCA30B663FABD9C9991B4DBA8F6D4CBF; X-Uaa-Csrf=6JrwXgyD7pXea8HMdNWyXM"
                  },
                  {
                    "key": "origin",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp"
                  },
                  {
                    "key": "pragma",
                    "value": "no-cache"
                  },
                  {
                    "key": "referer",
                    "value": "https://special01-app.ct.dev.customer.aeu.grp/specialportal/dashboard"
                  },
                  {
                    "key": "sec-ch-ua",
                    "value": "\"Chromium\";v=\"112\", \"Google Chrome\";v=\"112\", \"Not:A-Brand\";v=\"99\""
                  },
                  {
                    "key": "sec-ch-ua-mobile",
                    "value": "?0"
                  },
                  {
                    "key": "sec-ch-ua-platform",
                    "value": "\"Windows\""
                  },
                  {
                    "key": "sec-fetch-dest",
                    "value": "empty"
                  },
                  {
                    "key": "sec-fetch-mode",
                    "value": "cors"
                  },
                  {
                    "key": "sec-fetch-site",
                    "value": "same-origin"
                  },
                  {
                    "key": "user-agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"createNewSubmission\",\r\n    \"params\": [\r\n        {\r\n            \"accountHolder\": {{dummyAccount}},\r\n            \"producerCodes\": [\r\n                {{producerCode}}\r\n            ]\r\n        }\r\n    ]\r\n}"
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getVehicleSearchInfo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const result = jsonData.result;\r",
                      "const quoteID = result.quoteID;\r",
                      "const sessionUUID = result.sessionUUID;\r",
                      "const vehicle = result.vehicles[0];\r",
                      "const longQuote_AIT = result.longQuote_AIT;\r",
                      "\r",
                      "pm.test(\"Quote ID and SessionUUID are present\", function () {\r",
                      "\r",
                      "    pm.expect(quoteID).to.be.a('string').and.to.not.be.empty;\r",
                      "    pm.expect(sessionUUID).to.be.a('string').and.to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Vehicle is present\", function () {\r",
                      "      pm.expect(vehicle).to.be.an('object');\r",
                      "      pm.expect(vehicle.vehicleType_AIT).to.be.a('string').and.to.equal(pm.collectionVariables.get(\"vehicleType_AIT\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"LongQuote_AIT is false\", function () {\r",
                      "      pm.expect(longQuote_AIT).to.be.a('boolean').and.to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"sessionUUID\", sessionUUID);\r",
                      "pm.collectionVariables.set(\"vehicle\", JSON.stringify(vehicle));\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["\r", ""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"getVehicleSearchInfo\",\r\n    \"params\": [\r\n        {\r\n            \"vehicleType\": \"{{vehicleType_AIT}}\",\r\n            \"notPlateNumber\": false,\r\n            \"isCompany_AIT\": false,\r\n            \"plateNumber\": \"{{plateNumber}}\",\r\n            \"dateOfBirth\": {{dateOfBirth}},\r\n            \"submissionNumber\": \"{{quoteID}}\",\r\n            \"sessionUUID\": \"{{sessionUUID}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "preQuote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "const body = jsonData.result[0];\r",
                      "\r",
                      "pm.test(\"Check response types\", function () {\r",
                      "    pm.expect(body.coveragesList).to.be.an(\"array\");  \r",
                      "    pm.expect(body.offeredQuote).to.be.an(\"object\");  \r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.a(\"boolean\");  \r",
                      "    pm.expect(body.periodStartDate).to.be.an(\"object\"); \r",
                      "    pm.expect(body.periodEndDate).to.be.an(\"object\");  \r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check coverages are present in the response\", function () {\r",
                      "    assertCoverageIsPresent(\"A001\");\r",
                      "    assertCoverageIsPresent(\"AC001\");\r",
                      "    assertCoverageIsPresent(\"AC002\");\r",
                      "    assertCoverageIsPresent(\"A002\");\r",
                      "    assertCoverageIsPresent(\"AC003\");\r",
                      "    assertCoverageIsPresent(\"A003\");\r",
                      "    assertCoverageIsPresent(\"A004\");\r",
                      "    assertCoverageIsPresent(\"A008\");\r",
                      "\r",
                      "    const assertCoverageIsPresent = (code) => {\r",
                      "        const cov = body.coveragesList.find(cov => cov.code === code);\r",
                      "        pm.expect(cov).to.be.an(\"object\", `Could not find the ${code} coverage`);\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check offering is populated\", function () {\r",
                      "    var offering = body.offering;\r",
                      "    pm.expect(offering).to.have.property(\"premium\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check no uwissues\", function () {\r",
                      "    pm.expect(body.offeredQuote.hasBlockingUWIssues).to.be.false;\r",
                      "    pm.expect(body.offeredQuote.activeUWIssues).to.be.empty; \r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const moment = require(\"moment\");\r",
                      "\r",
                      "const today = moment().date();\r",
                      "const todayMonth = moment().month();\r",
                      "const todayYear = moment().year();\r",
                      "const nextYear = todayYear + 1 ;\r",
                      "const paymentPeriod = 'annual';\r",
                      "\r",
                      "pm.collectionVariables.set(\"today\", today);\r",
                      "pm.collectionVariables.set(\"todayMonth\", todayMonth);\r",
                      "pm.collectionVariables.set(\"todayYear\", todayYear);\r",
                      "pm.collectionVariables.set(\"nextYear\", nextYear);\r",
                      "pm.collectionVariables.set(\"paymentPeriod\", paymentPeriod);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"81637d22-0d8b-42d2-b73d-bf28a86aa063\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"preQuote\",\r\n    \"params\": [\r\n        {\r\n            \"sessionUUID\": \"{{sessionUUID}}\",\r\n            \"quoteID\": \"{{quoteID}}\",\r\n            \"vehicles\": [\r\n                {{vehicle}}\r\n            ],\r\n            \"subjects\": [\r\n                {\r\n                    \"isPerson_AIT\": true,\r\n                    \"sonsBetween0_3_AIT\": 0,\r\n                    \"isDriver_AIT\": false,\r\n                    \"sonsBetween4_16_AIT\": 0,\r\n                    \"monthsSuspended_AIT\": 0,\r\n                    \"sonsBetween17_25_AIT\": 0,\r\n                    \"vehicleSubjectRoles_AIT\": [\r\n                        {\r\n                            \"fixedId\": 96268,\r\n                            \"roles_AIT\": [\r\n                                {\r\n                                    \"publicID\": \"zjcggsalc8q00fetac9lhvvo1l8\",\r\n                                    \"rol_AIT\": \"MAIN_DRIVER\"\r\n                                },\r\n                                {\r\n                                    \"publicID\": \"zqmga70ocvudr3o173nekbcernb\",\r\n                                    \"rol_AIT\": \"MAIN_OWER\"\r\n                                }\r\n                            ],\r\n                            \"vehicleID_AIT\": \"pc:116274\",\r\n                            \"ownerLeasing_AIT\": false\r\n                        }\r\n                    ],\r\n                    \"sonsOver26_AIT\": 0,\r\n                    \"fineTimes_AIT\": 0,\r\n                    \"suspendedTimes_AIT\": 0,\r\n                    \"fixedId\": 151752,\r\n                    \"gender\": \"M\",\r\n                    \"person\": {\r\n                        \"displayName\": \"sergio sergi\",\r\n                        \"dateOfBirth\": {\r\n                            \"month\": 1,\r\n                            \"year\": 1980,\r\n                            \"day\": 1\r\n                        },\r\n                        \"firstName\": \"sergio\",\r\n                        \"lastName\": \"sergi\",\r\n                        \"foreignB\": false,\r\n                        \"emailAddress1_AIT\": \"s@email.dummy\",\r\n                        \"primaryAddress_AIT\": {\r\n                            \"nameProvinceOfResidence_AIT\": \"TORINO\",\r\n                            \"displayName\": \"VIA 0dummyaddressline0 1, 00000 (TO)\",\r\n                            \"addressLine1\": \"0dummyaddressline0\",\r\n                            \"city\": \"28387\",\r\n                            \"postalCode\": \"00000\",\r\n                            \"provinceOfResidence_AIT\": \"TO\",\r\n                            \"nameCity_AIT\": \"MONTALDO TORINESE\",\r\n                            \"addressNumber_AIT\": \"1\",\r\n                            \"toponym_AIT\": \"VIA\"\r\n                        },\r\n                        \"mainCellPhone_AIT\": \"123456789\",\r\n                        \"provinceOfBirth_AIT\": \"TO\",\r\n                        \"countryOfBirth_AIT\": \"ITAL\",\r\n                        \"cityOfBirth_AIT\": \"31240\",\r\n                        \"taxId_AIT\": \"0000000000000000\",\r\n                        \"yearOfArrival_AIT\": \"0\",\r\n                        \"nameCityOfBirth_AIT\": \"VOLVERA\",\r\n                        \"nameProvinceOfBirth_AIT\": \"TORINO\"\r\n                    },\r\n                    \"isPolicyHolder\": true\r\n                }\r\n            ],\r\n            \"periodStartDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{todayYear}}\r\n            },\r\n            \"periodEndDate\": {\r\n                \"day\": \"{{today}}\",\r\n                \"month\": {{todayMonth}},\r\n                \"year\": {{nextYear}}\r\n            },\r\n            \"paymentPeriod_AIT\": \"{{paymentPeriod}}\"\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{protocol}}://{{gwPcHost}}/{{gwPcPath}}/{{gwServletPath}}/edge/intermediaries/quotationflow",
                  "protocol": "{{protocol}}",
                  "host": ["{{gwPcHost}}"],
                  "path": [
                    "{{gwPcPath}}",
                    "{{gwServletPath}}",
                    "edge",
                    "intermediaries",
                    "quotationflow"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const plateNumber = \"SP003FQ\";",
                  "const dateOfBirth = {",
                  "    day: 2,",
                  "    month: 4,",
                  "    year: 1963,",
                  "};",
                  "const vehicleType_AIT = \"car\";",
                  "",
                  "pm.collectionVariables.set(\"plateNumber\", plateNumber);",
                  "pm.collectionVariables.set(\"dateOfBirth\", JSON.stringify(dateOfBirth));",
                  "pm.collectionVariables.set(\"vehicleType_AIT\", vehicleType_AIT);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "password",
        "value": "{{password}}",
        "type": "string"
      },
      {
        "key": "username",
        "value": "{{username}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const username = \"ProdTest1\";",
          "const password = \"ProdTest1@\";",
          "const dummyAccount = {",
          "    contactName: \"0dummyname0\",",
          "    primaryAddress: {",
          "        city: \"0dummycity0\",",
          "        state: \"VAO_EXT\",",
          "        postalCode: \"00000\",",
          "        country: \"IT\",",
          "        addressLine1: \"0dummyaddressline0\",",
          "        addressType: \"home\",",
          "        provinceOfResidence_AIT: \"TO\",",
          "        addressNumber_AIT: \"1\",",
          "        toponym_AIT: \"VIA\",",
          "    },",
          "    firstName: \"0dummyname0\",",
          "    lastName: \"0dummyname0\",",
          "    subtype: \"Person\",",
          "    producerCode: \"111\",",
          "    emailAddress1: \"dummy@email.dummy\",",
          "    mainCellPhone_AIT: \"123456789\",",
          "    countryOfBirth_AIT: \"ITAL\",",
          "    yearOfArrival_AIT: \"\",",
          "    provinceOfBirth_AIT: \"TO\",",
          "    cityOfBirth_AIT: \"31240\",",
          "    dateOfBirth: {",
          "        year: 1980,",
          "        month: 1,",
          "        day: 1,",
          "    },",
          "    gender: \"M\",",
          "    taxId_AIT: \"0000000000000000\",",
          "};",
          "",
          "const producerCode = {",
          "  code: \"BrokersPlan001\",",
          "  default: true,",
          "  publicID: \"pc:601\",",
          "  displayValue: \"ProdTest1 ProdTest1 (BrokersPlan001)\",",
          "};",
          "",
          "pm.collectionVariables.set(\"username\", username);",
          "pm.collectionVariables.set(\"password\", password);",
          "pm.collectionVariables.set(\"dummyAccount\", JSON.stringify(dummyAccount));",
          "pm.collectionVariables.set(\"producerCode\", JSON.stringify(producerCode));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "quoteID",
      "value": ""
    },
    {
      "key": "sessionUUID",
      "value": ""
    },
    {
      "key": "vehicle",
      "value": ""
    },
    {
      "key": "username",
      "value": ""
    },
    {
      "key": "password",
      "value": ""
    },
    {
      "key": "dummyAccount",
      "value": ""
    },
    {
      "key": "producerCode",
      "value": ""
    },
    {
      "key": "plateNumber",
      "value": ""
    },
    {
      "key": "dateOfBirth",
      "value": ""
    },
    {
      "key": "vehicleType_AIT",
      "value": ""
    },
    {
      "key": "today",
      "value": ""
    },
    {
      "key": "todayMonth",
      "value": ""
    },
    {
      "key": "todayYear",
      "value": ""
    },
    {
      "key": "nextYear",
      "value": ""
    },
    {
      "key": "paymentPeriod",
      "value": ""
    },
    {
      "key": "primaryAddress",
      "value": ""
    }
  ]
}
